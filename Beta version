<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quality Control Tool</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link rel="icon" type="image/jfif" href="Logo.jpeg">

    <style>
        body {
            font-family: 'Calibri', Arial, sans-serif;
            margin: 0;
            display: flex;
            height: 100vh;
            background-color: #f9f9f9;
        }

        .sidebar {
            width: 220px;
            background-color: #1a2634;
            padding: 20px;
            box-shadow: 4px 0 15px rgba(0, 0, 0, 0.2);
            border-radius: 0 12px 12px 0;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            transition: width 0.3s ease;
        }

        .sidebar .header {
            color: #ffffff;
            font-size: 14px;
            font-family: 'Calibri', sans-serif;
            text-align: center;
            margin-bottom: 20px;
            background: linear-gradient(135deg, #2d3b4e, #1a2634);
            padding: 12px 15px;
            border-radius: 6px;
        }

        .sidebar button {
            display: flex;
            align-items: center;
            width: 100%;
            padding: 12px 15px;
            margin-bottom: 15px;
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            text-align: left;
            font-size: 14px;
            font-family: 'Calibri', sans-serif;
            transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .sidebar button:hover {
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            transform: translateX(5px);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        }

        .sidebar button.active {
            background: linear-gradient(135deg, #22c55e, #16a34a);
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .sidebar button i {
            margin-right: 10px;
            font-size: 16px;
        }

        .sidebar .footer {
            color: #ffffff;
            font-size: 18px;
            font-family: 'Calibri', sans-serif;
            font-weight: bold;
            text-align: center;
            margin-top: 20px;
            letter-spacing: 1px;
        }

        .main-content {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            background-color: white;
            border-radius: 15px 0 0 15px;
            box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);
        }

        .header-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 10px 50px;
            background-color: #f9f9f9;
            border-bottom: 1px solid #ddd;
            border-radius: 8px 8px 0 0;
        }

        h1 {
            font-size: 14px;
            color: #333;
            margin: 0;
            font-family: 'Calibri', sans-serif;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .date-time {
            color: #333;
            font-size: 14px;
            font-family: 'Calibri', sans-serif;
        }

        table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0 1px;
            margin: 20px 0;
            font-size: 14px;
            font-family: 'Calibri', sans-serif;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 0;
            text-align: left;
            height: 20px;
            line-height: 20px;
            box-sizing: border-box;
        }

        th {
            background-color: #f2f2f2;
            font-weight: bold;
            text-align: center;
            font-size: 14px;
        }

        input[type="text"] {
            width: 100%;
            height: 100%;
            padding: 4px;
            box-sizing: border-box;
            border: none;
            outline: none;
            font-size: 14px;
            font-family: 'Calibri', sans-serif;
            line-height: 12px;
            transition: border 0.2s ease; /* Smooth transition for border */
        }

        input[type="text"]:focus {
            border: 2px solid #6ea8fe; /* Lighter blue highlight */
            padding: 2px; /* Adjust padding to account for thicker border */
        }

        .output-cell {
            width: 100%;
            height: 100%;
            padding: 4px;
            box-sizing: border-box;
            font-size: 14px;
            font-family: 'Calibri', sans-serif;
            line-height: 12px;
            transition: border 0.2s ease; /* Smooth transition for border */
        }

        .output-cell:focus {
            border: 2px solid #6ea8fe; /* Lighter blue highlight */
            padding: 2px; /* Adjust padding to account for thicker border */
        }

        .clear-btn, .export-btn {
            padding: 5px 10px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
            font-family: 'Calibri', sans-serif;
            transition: background-color 0.3s ease;
        }

        .clear-btn {
            background-color: #e66b6b;
            color: #333;
        }

        .clear-btn:hover {
            background-color: #cc5555;
        }

        .export-btn {
            background-color: #1e6ba8;
            color: white;
        }

        .export-btn:hover {
            background-color: #1a5a8d;
        }

        .blank-sheet {
            display: none;
            padding: 0 20px 20px 20px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: #f9f9f9;
        }

        .tools-container {
            display: flex;
            justify-content: space-between;
            gap: 20px;
            margin-top: 20px;
        }

        .tools-section {
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            background-color: white;
            min-width: 0;
        }

        .tools-section.input {
            flex: 4;
        }

        .tools-section.input table td {
            background-color: #ffffff;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 4px;
            margin-bottom: 3px;
        }

        .tools-section.input table td.output-cell {
            background-color: #ffffff;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 4px;
            margin-bottom: 3px;
        }

        .tools-section.input input[type="text"] {
            background: transparent;
            border: none;
            outline: none;
            width: 100%;
            height: 100%;
            font-size: 14px;
            font-family: 'Calibri', sans-serif;
            line-height: 12px;
        }

        .tools-section.buttons {
            flex: 0.5;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            padding: 15px;
        }

        .tool-btn {
            display: block;
            margin: 10px 0;
            padding: 5px 10px;
            width: 120px;
            height: 30px;
            background-color: #1e6ba8; /* Same as export-btn */
            color: white;
            border: 1px solid #ccc;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px; /* Keeping the font size from previous request */
            font-family: 'Calibri', sans-serif;
            font-weight: 700; /* Keeping the bold weight from previous request */
            text-align: center;
            transition: background-color 0.3s ease;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        }

        .tool-btn:hover {
            background-color: #1a5a8d; /* Same as export-btn hover */
        }

        #dataTable th:nth-child(1) { width: 150px; }
        #dataTable th:nth-child(2) { width: 100px; }
        #dataTable th:nth-child(3) { width: 200px; }
        #dataTable th:nth-child(4) { width: 100px; }
        #dataTable th:nth-child(5) { width: 100px; }
        #dataTable th:nth-child(6) { width: 150px; }
        #dataTable th:nth-child(7) { width: 80px; }
        #dataTable th:nth-child(8) { width: 120px; }

        #dataTablePDM th:nth-child(1) { width: 100px; }
        #dataTablePDM th:nth-child(2) { width: 150px; }
        #dataTablePDM th:nth-child(3) { width: 200px; }
        #dataTablePDM th:nth-child(4) { word-break: break-all; width: 100px; }
        #dataTablePDM th:nth-child(5) { width: 120px; }
        #dataTablePDM th:nth-child(6) { width: 120px; }

        #classificationDetailsTable th:nth-child(1) { width: 100px; }
        #classificationDetailsTable th:nth-child(2) { width: 150px; }
        #classificationDetailsTable th:nth-child(3) { width: 100px; }
        #classificationDetailsTable th:nth-child(4) { width: 150px; }
        #classificationDetailsTable th:nth-child(5) { width: 100px; }
        #classificationDetailsTable th:nth-child(6) { width: 200px; }
        #classificationDetailsTable th:nth-child(7) { width: 100px; }

        #toolTable th:nth-child(1) { width: 60%; }
        #toolTable th:nth-child(2) { width: 48%; }

        #pulldataBackupTable th:nth-child(1) { width: 150px; }
        #pulldataBackupTable th:nth-child(2) { width: 100px; }
        #pulldataBackupTable th:nth-child(3) { width: 200px; }
        #pulldataBackupTable th:nth-child(4) { width: 100px; }
        #pulldataBackupTable th:nth-child(5) { width: 100px; }
        #pulldataBackupTable th:nth-child(6) { width: 150px; }
        #pulldataBackupTable th:nth-child(7) { width: 80px; }
        #pulldataBackupTable th:nth-child(8) { width: 120px; }
    </style>
</head>
<body>
    <div class="sidebar">
        <div>
            <div class="header">Quality Control Tool</div>
            <button onclick="showSheet('pulldataBackup')"><i class="fas fa-archive"></i> Pulldata (Backup)</button>
            <button onclick="showSheet('scraperDataPDM')"><i class="fas fa-database"></i> Scraper Data (PDM)</button>
            <button onclick="showSheet('scraperData')"><i class="fas fa-database"></i> Scraper Data (Classification)</button>
            <button onclick="showSheet('classificationDetails')"><i class="fas fa-list"></i> Classification Details</button>
            <button onclick="showSheet('qcReport')"><i class="fas fa-file-alt"></i> QC Report</button>
            <button onclick="showSheet('tools')"><i class="fas fa-tools"></i> Tools</button>
        </div>
        <div class="footer">Technosoft Engineering</div>
    </div>

    <div class="main-content">
        <div id="scraperData" class="blank-sheet">
            <div class="header-container">
                <h1>Scraper Data (Classification)</h1>
                <div class="header-right">
                    <button class="clear-btn" onclick="clearSheet('dataTable')">Clear Data</button>
                    <button class="export-btn" onclick="exportToCSV('dataTable')">Export to CSV</button>
                    <div class="date-time" id="dateTimeScraperData"></div>
                </div>
            </div>
            <table id="dataTable">
                <thead>
                    <tr>
                        <th>Heading Name</th>
                        <th>Heading id</th>
                        <th>Definition</th>
                        <th>Family</th>
                        <th>PDM NUM</th>
                        <th>Link</th>
                        <th>HOS</th>
                        <th>Updated By</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>

        <div id="scraperDataPDM" class="blank-sheet">
            <div class="header-container">
                <h1>Scraper Data (PDM)</h1>
                <div class="header-right">
                    <button class="clear-btn" onclick="clearSheet('dataTablePDM')">Clear Data</button>
                    <button class="export-btn" onclick="exportToCSV('dataTablePDM')">Export to CSV</button>
                    <div class="date-time" id="dateTimeScraperPDM"></div>
                </div>
            </div>
            <table id="dataTablePDM">
                <thead>
                    <tr>
                        <th>PDM NUM</th>
                        <th>Summary</th>
                        <th>PDM Text</th>
                        <th>Heading Count</th>
                        <th>Date</th>
                        <th>Updated BY</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>

        <div id="classificationDetails" class="blank-sheet">
            <div class="header-container">
                <h1>Classification Details</h1>
                <div class="header-right">
                    <button class="clear-btn" onclick="clearSheet('classificationDetailsTable')">Clear Data</button>
                    <button class="export-btn" onclick="exportToCSV('classificationDetailsTable')">Export to CSV</button>
                    <div class="date-time" id="dateTimeClassification"></div>
                </div>
            </div>
            <table id="classificationDetailsTable">
                <thead>
                    <tr>
                        <th>Heading Id</th>
                        <th>Heading Name</th>
                        <th>Family</th>
                        <th>Link</th>
                        <th>PDM NUM</th>
                        <th>PDM TEXT</th>
                        <th>Heading Type</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>

        <div id="qcReport" class="blank-sheet">
            <div class="header-container">
                <h1>QC Report</h1>
                <div class="header-right">
                    <button class="clear-btn" onclick="clearSheet('qcReport')">Clear Data</button>
                    <div class="date-time" id="dateTimeQCReport"></div>
                </div>
            </div>
        </div>

        <div id="tools" class="blank-sheet">
            <div class="header-container">
                <h1>Tools</h1>
                <div class="header-right">
                    <button class="export-btn" onclick="exportToCSV('tools')">Export to CSV</button>
                    <div class="date-time" id="dateTimeTools"></div>
                </div>
            </div>
            <div class="tools-container">
                <div class="tools-section input">
                    <table id="toolTable">
                        <thead>
                            <tr>
                                <th>Input Cell</th>
                                <th>Output Cell</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr><td><input type="text" class="input-cell" name="input1"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input2"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input3"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input4"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input5"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input6"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input7"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input8"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input9"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input10"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input11"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input12"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input13"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input14"></td><td><input type="text" class="output-cell" readonly></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input15"></td><td><input type="text" class="output-cell" readonly></td></tr>
                        </tbody>
                    </table>
                </div>
                <div class="tools-section buttons">
                    <div style="display: flex; flex-direction: column; align-items: center;">
                        <button class="tool-btn" onclick="spacingCheck()">Spacing Check</button>
                        <button class="tool-btn" onclick="removeSpace()">Remove Space</button>
                        <button class="tool-btn" onclick="wordCounter()">Word Counter</button>
                        <button class="tool-btn" onclick="clearToolData()">Clear Data</button>
                        <button class="tool-btn" onclick="linkCheck()">Link Check</button>
                        <button class="tool-btn" onclick="duplicatePDM()">Duplicate PDM</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="pulldataBackup" class="blank-sheet">
            <div class="header-container">
                <h1>Pulldata (Backup)</h1>
                <div class="header-right">
                    <button class="clear-btn" onclick="clearSheet('pulldataBackupTable')">Clear Data</button>
                    <button class="export-btn" onclick="exportToCSV('pulldataBackupTable')">Export to CSV</button>
                    <div class="date-time" id="dateTimeBackup"></div>
                </div>
            </div>
            <table id="pulldataBackupTable">
                <thead>
                    <tr>
                        <th>Heading Name</th>
                        <th>Heading id</th>
                        <th>Definition</th>
                        <th>Family</th>
                        <th>PDM NUM</th>
                        <th>Link</th>
                        <th>HOS</th>
                        <th>Updated By</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <script>
        function formatHeadingId(headingId) {
            let cleanNumber = headingId.replace(/ID:/g, '').replace(/[^0-9]/g, '');
            return cleanNumber.padStart(8, '0');
        }

        function extractNumber(str) {
            const match = str.match(/\d+/);
            return match ? match[0] : '';
        }

        function syncToClassificationDetails() {
            const scraperTable = document.getElementById('dataTable');
            const classificationTable = document.getElementById('classificationDetailsTable');
            
            const scraperRows = scraperTable.getElementsByTagName('tbody')[0].rows;
            const classificationRows = classificationTable.getElementsByTagName('tbody')[0].rows;

            // Allow dynamic row addition for dataTable (no limit, but sync all rows up to scraperRows.length)
            const maxRows = scraperRows.length;

            for (let i = 0; i < maxRows; i++) {
                if (i >= classificationRows.length) {
                    addRow('classificationDetailsTable');
                }
                
                const classificationRow = classificationTable.getElementsByTagName('tbody')[0].rows[i];
                const scraperRow = scraperRows[i];
                const headingIdInput = scraperRow.cells[1].querySelector('input');
                const headingNameInput = scraperRow.cells[0].querySelector('input');
                const definitionInput = scraperRow.cells[2].querySelector('input');
                const familyInput = scraperRow.cells[3].querySelector('input');
                const pdmNumInput = scraperRow.cells[4].querySelector('input');
                const linkInput = scraperRow.cells[5].querySelector('input');
                
                if (headingIdInput.value) {
                    classificationRow.cells[0].querySelector('input').value = formatHeadingId(headingIdInput.value);
                }
                if (headingNameInput.value) {
                    classificationRow.cells[1].querySelector('input').value = headingNameInput.value;
                }
                if (familyInput.value) {
                    classificationRow.cells[2].querySelector('input').value = familyInput.value;
                }
                if (linkInput.value) {
                    classificationRow.cells[3].querySelector('input').value = linkInput.value;
                }

                if (pdmNumInput.value) {
                    classificationRow.cells[4].querySelector('input').value = pdmNumInput.value;
                } else if (definitionInput.value) {
                    const numberFromDefinition = extractNumber(definitionInput.value);
                    if (numberFromDefinition) {
                        classificationRow.cells[4].querySelector('input').value = numberFromDefinition;
                    }
                }
            }
            syncPDMText();
        }

        function syncPDMText() {
            const pdmTable = document.getElementById('dataTablePDM');
            const classificationTable = document.getElementById('classificationDetailsTable');
            
            const pdmRows = pdmTable.getElementsByTagName('tbody')[0].rows;
            const classificationRows = classificationTable.getElementsByTagName('tbody')[0].rows;

            // Allow dynamic row addition for dataTablePDM and classificationDetailsTable (no limit)
            const maxRows = Math.max(classificationRows.length, pdmRows.length);

            for (let i = 0; i < maxRows; i++) {
                if (i >= classificationRows.length) {
                    addRow('classificationDetailsTable');
                }
                const classificationRow = classificationRows[i] || classificationTable.getElementsByTagName('tbody')[0].rows[i];
                const pdmNumInput = classificationRow.cells[4].querySelector('input');
                const pdmTextInput = classificationRow.cells[5].querySelector('input');
                const pdmNumValue = pdmNumInput.value.trim();

                if (!pdmNumValue) {
                    pdmTextInput.value = '';
                    continue;
                }

                if (isNaN(pdmNumValue)) {
                    pdmTextInput.value = 'This Heading does not have PDM';
                    continue;
                }

                let found = false;
                for (let j = 0; j < pdmRows.length; j++) {
                    const pdmRow = pdmRows[j];
                    const pdmNumSource = pdmRow.cells[0].querySelector('input').value.trim();
                    const pdmTextSource = pdmRow.cells[2].querySelector('input').value;

                    if (pdmNumValue.toLowerCase() === pdmNumSource.toLowerCase()) {
                        pdmTextInput.value = pdmTextSource;
                        found = true;
                        break;
                    }
                }

                if (!found) {
                    pdmTextInput.value = 'This PDM number does not have PDM text in Library';
                }
            }
        }

        function addRow(tableId) {
            const table = document.getElementById(tableId).getElementsByTagName('tbody')[0];
            const newRow = table.insertRow();

            let columns;
            if (tableId === 'dataTable') {
                columns = ['headingName', 'headingId', 'definition', 'family', 'pdmNum', 'link', 'hos', 'updatedBy'];
            } else if (tableId === 'dataTablePDM') {
                columns = ['pdmNum', 'summary', 'pdmText', 'headingCount', 'date', 'updatedBy'];
            } else if (tableId === 'classificationDetailsTable') {
                columns = ['headingId', 'headingName', 'family', 'link', 'pdmNum', 'pdmText', 'headingType'];
            } else if (tableId === 'pulldataBackupTable') {
                columns = ['headingName', 'headingId', 'definition', 'family', 'pdmNum', 'link', 'hos', 'updatedBy'];
            } else if (tableId === 'toolTable') {
                columns = ['input', 'output'];
            }

            columns.forEach(col => {
                const newCell = newRow.insertCell();
                const input = document.createElement('input');
                input.type = 'text';
                if (tableId === 'toolTable') {
                    if (col === 'input') {
                        input.className = 'input-cell';
                    } else if (col === 'output') {
                        input.className = 'output-cell';
                        input.readOnly = true;
                    }
                }
                input.name = col;
                newCell.appendChild(input);
            });

            if (tableId === 'dataTable') {
                syncToClassificationDetails();
            }
            if (tableId === 'classificationDetailsTable') {
                syncPDMText();
            }
        }

        function addToolRow() {
            const table = document.getElementById('toolTable').getElementsByTagName('tbody')[0];
            const newRow = table.insertRow();
            const inputCell = newRow.insertCell();
            const outputCell = newRow.insertCell();
            
            const input = document.createElement('input');
            input.type = 'text';
            input.className = 'input-cell';
            input.name = `input${table.rows.length}`;
            inputCell.appendChild(input);
            
            const output = document.createElement('input');
            output.type = 'text';
            output.className = 'output-cell';
            output.readOnly = true;
            outputCell.appendChild(output);
        }

        function clearSheet(tableId) {
            const table = document.getElementById(tableId).getElementsByTagName('tbody')[0];
            table.innerHTML = '';
            for (let i = 0; i < 20; i++) {  // Changed from 15 to 20 for specified tables, including toolTable
                if (tableId === 'toolTable') {
                    addToolRow();
                } else if (['dataTable', 'dataTablePDM', 'classificationDetailsTable', 'pulldataBackupTable'].includes(tableId)) {
                    addRow(tableId);
                } else {
                    addRow(tableId);
                }
            }
        }

        function exportToCSV(tableId) {
            const table = document.getElementById(tableId);
            const rows = table.querySelectorAll('tbody tr');
            const csv = [];
            rows.forEach(row => {
                const rowData = [];
                if (tableId === 'tools') {
                    const input = row.querySelector('.input-cell').value;
                    const output = row.querySelector('.output-cell').value;
                    rowData.push(input || '');
                    rowData.push(output || '');
                } else if (tableId === 'pulldataBackupTable') {
                    row.querySelectorAll('input').forEach(input => rowData.push(input.value));
                } else {
                    row.querySelectorAll('input').forEach(input => rowData.push(input.value));
                }
                csv.push(rowData.join(','));
            });
            const csvContent = 'data:text/csv;charset=utf-8,' + csv.join('\n');
            const encodedUri = encodeURI(csvContent);
            const link = document.createElement('a');
            link.setAttribute('href', encodedUri);
            link.setAttribute('download', `${tableId}.csv`);
            document.body.appendChild(link);
            link.click();
        }

        function handlePaste(event, tableId) {
            const table = document.getElementById(tableId).getElementsByTagName('tbody')[0];
            const clipboardData = event.clipboardData || window.clipboardData;
            const pastedData = clipboardData.getData('text');

            // Handle pasting differently for all specified tables to allow dynamic row addition
            let rows;
            if (['pulldataBackupTable', 'dataTablePDM', 'dataTable', 'classificationDetailsTable', 'toolTable'].includes(tableId)) {
                rows = pastedData.split('\n').map(row => row.split('\t')); // No limit for these tables
            } else {
                rows = pastedData.split('\n').map(row => row.split('\t')).slice(0, 20); // Limit to 20 rows for other tables (none currently apply)
            }

            const startCell = event.target.closest('td');
            const startRow = startCell.parentElement;
            const startRowIndex = Array.from(startRow.parentElement.children).indexOf(startRow);
            const startCellIndex = Array.from(startRow.children).indexOf(startCell);

            rows.forEach((row, rowIndex) => {
                let currentRow = table.rows[startRowIndex + rowIndex];
                if (!currentRow) {
                    if (tableId === 'toolTable') {
                        addToolRow();
                    } else {
                        addRow(tableId);
                    }
                    currentRow = table.rows[startRowIndex + rowIndex];
                }
                row.forEach((cellData, cellIndex) => {
                    const currentCell = currentRow.cells[startCellIndex + cellIndex];
                    if (currentCell) {
                        const input = currentCell.querySelector('input');
                        if (input) {
                            input.value = cellData.trim();
                        }
                    }
                });
            });

            if (tableId === 'dataTable') {
                syncToClassificationDetails();
            }
            if (tableId === 'classificationDetailsTable') {
                syncPDMText();
            }

            event.preventDefault();
        }

        document.getElementById('dataTable').addEventListener('paste', (event) => handlePaste(event, 'dataTable'));
        document.getElementById('dataTablePDM').addEventListener('paste', (event) => handlePaste(event, 'dataTablePDM'));
        document.getElementById('classificationDetailsTable').addEventListener('paste', (event) => handlePaste(event, 'classificationDetailsTable'));
        document.getElementById('toolTable').addEventListener('paste', (event) => handlePaste(event, 'toolTable'));
        document.getElementById('pulldataBackupTable').addEventListener('paste', (event) => handlePaste(event, 'pulldataBackupTable'));

        function showSheet(sheetId) {
            const sheets = document.querySelectorAll('.blank-sheet');
            sheets.forEach(sheet => sheet.style.display = 'none');
            const selectedSheet = document.getElementById(sheetId);
            if (selectedSheet) {
                selectedSheet.style.display = 'block';
            }
            const buttons = document.querySelectorAll('.sidebar button');
            buttons.forEach(button => button.classList.remove('active'));
            const activeButton = document.querySelector(`.sidebar button[onclick="showSheet('${sheetId}')"]`);
            if (activeButton) {
                activeButton.classList.add('active');
            }
        }

        function initializeTable() {
            ['dataTable', 'dataTablePDM', 'classificationDetailsTable', 'pulldataBackupTable', 'toolTable'].forEach(tableId => {
                const table = document.getElementById(tableId).getElementsByTagName('tbody')[0];
                for (let i = 0; i < 20; i++) {  // Changed from 15 to 20 for all specified tables, including toolTable
                    if (tableId === 'toolTable') {
                        addToolRow();
                    } else {
                        addRow(tableId);
                    }
                }
            });
            syncPDMText();
        }

        function spacingCheck() {
            const rows = document.querySelectorAll('#toolTable tbody tr');
            rows.forEach(row => {
                const input = row.querySelector('.input-cell');
                const outputCell = row.querySelector('.output-cell');
                const value = input.value.trim();
                let output = '';
                if (value.includes('  ')) {
                    output = 'Contains extra spaces!';
                } else {
                    output = 'No extra spaces.';
                }
                outputCell.value = output;
            });
        }

        function removeSpace() {
            const rows = document.querySelectorAll('#toolTable tbody tr');
            rows.forEach(row => {
                const input = row.querySelector('.input-cell');
                const outputCell = row.querySelector('.output-cell');
                const value = input.value.trim().replace(/\s+/g, ' ');
                outputCell.value = value || '';
                input.value = value;
            });
        }

        function wordCounter() {
            const rows = document.querySelectorAll('#toolTable tbody tr');
            rows.forEach(row => {
                const input = row.querySelector('.input-cell');
                const outputCell = row.querySelector('.output-cell');
                const value = input.value.trim();
                let output = '';
                if (value) {
                    const words = value.split(/\s+/).filter(word => word.length > 0);
                    output = `${words.length} word${words.length !== 1 ? 's' : ''}.`;
                }
                outputCell.value = output;
            });
        }

        function clearToolData() {
            const rows = document.querySelectorAll('#toolTable tbody tr');
            rows.forEach(row => {
                const input = row.querySelector('.input-cell');
                const outputCell = row.querySelector('.output-cell');
                input.value = '';
                outputCell.value = '';
            });
        }

        function linkCheck() {
            const rows = document.querySelectorAll('#toolTable tbody tr');
            const urlRegex = /^(https?:\/\/[^\s]+)$/i;
            rows.forEach(row => {
                const input = row.querySelector('.input-cell');
                const outputCell = row.querySelector('.output-cell');
                const value = input.value.trim();
                let output = '';
                if (urlRegex.test(value)) {
                    output = 'Valid URL!';
                } else if (value) {
                    output = 'Not a valid URL.';
                }
                outputCell.value = output;
            });
        }

        function duplicatePDM() {
            const rows = document.querySelectorAll('#toolTable tbody tr');
            const values = Array.from(rows).map(row => row.querySelector('.input-cell').value.trim().toLowerCase());
            const duplicates = values.filter((item, index) => values.indexOf(item) !== index && item);
            rows.forEach(row => {
                const input = row.querySelector('.input-cell');
                const outputCell = row.querySelector('.output-cell');
                const value = input.value.trim();
                let output = '';
                if (duplicates.includes(value.toLowerCase()) && value) {
                    output = 'Duplicate PDM found!';
                } else if (value) {
                    output = 'No duplicate PDM.';
                }
                outputCell.value = output;
            });
        }

        function updateDateTime() {
            const now = new Date();
            const dateTimeString = now.toLocaleString('en-US', {
                dateStyle: 'medium',
                timeStyle: 'medium'
            });
            document.getElementById('dateTimeScraperData').textContent = dateTimeString;
            document.getElementById('dateTimeScraperPDM').textContent = dateTimeString;
            document.getElementById('dateTimeClassification').textContent = dateTimeString;
            document.getElementById('dateTimeQCReport').textContent = dateTimeString;
            document.getElementById('dateTimeTools').textContent = dateTimeString;
            document.getElementById('dateTimeBackup').textContent = dateTimeString;
        }

        window.onload = function() {
            initializeTable();
            updateDateTime();
            setInterval(updateDateTime, 1000);
        };
    </script>
</body>
</html>
