<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Document metadata -->
    <meta charset="UTF-8"> <!-- Specifies character encoding for the document -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- Ensures responsive viewport for mobile devices -->
    <title>Quality Control Tool</title> <!-- Sets the title of the webpage, displayed in browser tabs -->

    <!-- External resources -->
    <!-- FontAwesome for Icons: Links to FontAwesome CDN for using icons in the UI -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <!-- Favicon: Sets the webpage icon (Logo.jpeg) displayed in browser tabs -->
    <link rel="icon" type="image/jfif" href="Logo.jpeg">

    <style>
        /* Global styles for the body */
        body {
            font-family: 'Calibri', Arial, sans-serif; /* Default font family for the document */
            margin: 0; /* Removes default margin */
            display: flex; /* Uses flexbox for layout */
            height: 100vh; /* Full viewport height */
            background-color: #f9f9f9; /* Light gray background for the body */
        }

        /* Sidebar styles: Left navigation panel */
        .sidebar {
            width: 220px; /* Width of the sidebar */
            background-color: #1a2634; /* Dark blue background for modern look */
            padding: 20px; /* Internal spacing */
            box-shadow: 4px 0 15px rgba(0, 0, 0, 0.2); /* Shadow for depth on the right side */
            border-radius: 0 12px 12px 0; /* Rounded corners on the right side */
            display: flex; /* Uses flexbox for internal layout */
            flex-direction: column; /* Stacks children vertically */
            justify-content: space-between; /* Distributes space between header, buttons, and footer */
            transition: width 0.3s ease; /* Smooth transition for width changes */
        }

        /* Sidebar header styles: Top text in sidebar */
        .sidebar .header {
            color: #ffffff; /* White text for contrast */
            font-size: 14px; /* Font size for readability */
            font-family: 'Calibri', sans-serif; /* Matches body font */
            text-align: center; /* Centers the text */
            margin-bottom: 20px; /* Space below the header */
            background: linear-gradient(135deg, #2d3b4e, #1a2634); /* Gradient background for visual appeal */
            padding: 12px 15px; /* Internal padding */
            border-radius: 6px; /* Rounded corners for a modern look */
        }

        /* Sidebar button styles: Navigation buttons */
        .sidebar button {
            display: flex; /* Uses flexbox for icon and text alignment */
            align-items: center; /* Centers items vertically */
            width: 100%; /* Full width of sidebar */
            padding: 12px 15px; /* Internal padding */
            margin-bottom: 15px; /* Spacing between buttons */
            background: linear-gradient(135deg, #3b82f6, #2563eb); /* Blue gradient background */
            color: white; /* White text for contrast */
            border: none; /* No border */
            border-radius: 6px; /* Rounded corners */
            cursor: pointer; /* Hand cursor on hover */
            text-align: left; /* Left-aligned text */
            font-size: 14px; /* Font size for readability */
            font-family: 'Calibri', sans-serif; /* Matches body font */
            transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease; /* Smooth transitions for hover effects */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
        }

        /* Sidebar button hover styles: Changes on mouse hover */
        .sidebar button:hover {
            background: linear-gradient(135deg, #2563eb, #1d4ed8); /* Darker blue gradient on hover */
            transform: translateX(5px); /* Slight horizontal shift for interaction feedback */
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15); /* Stronger shadow on hover */
        }

        /* Sidebar button active state: When button is selected */
        .sidebar button.active {
            background: linear-gradient(135deg, #22c55e, #16a34a); /* Green gradient for active state */
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); /* Stronger shadow for emphasis */
        }

        /* Icon styling within sidebar buttons */
        .sidebar button i {
            margin-right: 10px; /* Space between icon and text */
            font-size: 16px; /* Size of FontAwesome icons */
        }

        /* Sidebar footer styles: Bottom text in sidebar */
        .sidebar .footer {
            color: #ffffff; /* White text for contrast */
            font-size: 18px; /* Larger font for prominence */
            font-family: 'Calibri', sans-serif; /* Matches body font */
            font-weight: bold; /* Bold for emphasis */
            text-align: center; /* Centers the text */
            margin-top: 20px; /* Space above the footer */
            letter-spacing: 1px; /* Slight spacing for visual appeal */
        }

        /* Main content area styles: Right section of the page */
        .main-content {
            flex: 1; /* Takes remaining space after sidebar */
            padding: 20px; /* Internal spacing */
            overflow-y: auto; /* Enables vertical scrolling if content overflows */
            background-color: white; /* White background */
            border-radius: 15px 0 0 15px; /* Rounded corners on left side */
            box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1); /* Shadow for depth on left side */
        }

        /* Header container styles: Top section of each content page */
        .header-container {
            display: flex; /* Uses flexbox for layout */
            justify-content: space-between; /* Space between title and right-aligned elements */
            align-items: center; /* Vertically centers items */
            margin-bottom: 20px; /* Space below the header */
            padding: 10px 50px; /* Internal padding */
            background-color: #f9f9f9; /* Light gray background */
            border-bottom: 1px solid #ddd; /* Light border at the bottom */
            border-radius: 8px 8px 0 0; /* Rounded corners at top */
        }

        /* Page title styles: Heading for each content section */
        h1 {
            font-size: 14px; /* Font size for readability */
            color: #333; /* Dark gray text */
            margin: 0; /* Removes default margin */
            font-family: 'Calibri', sans-serif; /* Matches body font */
        }

        /* Header right section styles: Buttons and date-time on the right */
        .header-right {
            display: flex; /* Uses flexbox for layout */
            align-items: center; /* Vertically centers items */
            gap: 10px; /* Space between elements */
        }

        /* Date-time display styles: Shows current date and time */
        .date-time {
            color: #333; /* Dark gray text */
            font-size: 14px; /* Font size for readability */
            font-family: 'Calibri', sans-serif; /* Matches body font */
        }

        /* Table styles: General table design for data display */
        table {
            width: 100%; /* Full width of container */
            border-collapse: separate; /* Changed to separate for border-spacing */
            border-spacing: 0 3px; /* Maintains 3px vertical spacing between rows for boundaries and padding */
            margin: 20px 0; /* Vertical margin */
            font-size: 14px; /* Font size for readability */
            font-family: 'Calibri', sans-serif; /* Matches body font */
        }

        /* Table header and cell styles */
        th, td {
            border: 1px solid #ddd; /* Light gray border */
            padding: 0; /* No internal padding (handled by inputs) */
            text-align: left; /* Left-aligned text */
            height: 20px; /* Fixed height for consistency, same for both sections */
            line-height: 20px; /* Ensures consistent height for text and inputs */
            box-sizing: border-box; /* Ensures padding and border are included in height */
        }

        /* Table header styles: Bold headers with centered text */
        th {
            background-color: #f2f2f2; /* Light gray background */
            font-weight: bold; /* Bold text for headers */
            text-align: center; /* Centered text */
            font-size: 14px; /* Font size for readability */
        }

        /* Input field styles: For editable table cells */
        input[type="text"] {
            width: 100%; /* Full width of cell (unchanged) */
            height: 100%; /* Full height of cell, ensuring same height as output (20px) */
            padding: 4px; /* Internal padding */
            box-sizing: border-box; /* Includes padding in width/height calculations */
            border: none; /* No border */
            outline: none; /* No outline on focus */
            font-size: 14px; /* Font size for readability */
            font-family: 'Calibri', sans-serif; /* Matches body font */
            line-height: 12px; /* Adjusts line height to fit within 20px height */
        }

        /* Output cell text styling to match input height (empty by default) */
        .output-cell {
            width: 100%; /* Full width of cell (unchanged) */
            height: 100%; /* Full height of cell, ensuring same height as input (20px) */
            padding: 4px; /* Internal padding to match input */
            box-sizing: border-box; /* Ensures padding and border are included in height */
            font-size: 14px; /* Font size for readability */
            font-family: 'Calibri', sans-serif; /* Matches body font */
            line-height: 12px; /* Adjusts line height to fit within 20px height */
            white-space: nowrap; /* Prevents text wrapping */
            overflow: hidden; /* Hides overflow text */
            text-overflow: ellipsis; /* Adds ellipsis for overflow */
        }

        /* Clear and Export button styles: Action buttons in headers */
        .clear-btn, .export-btn {
            padding: 5px 10px; /* Internal padding */
            border: none; /* No border */
            border-radius: 5px; /* Rounded corners */
            cursor: pointer; /* Hand cursor on hover */
            font-size: 12px; /* Smaller font for buttons */
            font-family: 'Calibri', sans-serif; /* Matches body font */
            transition: background-color 0.3s ease; /* Smooth background color transition */
        }

        /* Clear button specific styles (darker background) */
        .clear-btn {
            background-color: #e66b6b; /* Darker red background */
            color: #333; /* Dark gray text */
        }

        /* Clear button hover state */
        .clear-btn:hover {
            background-color: #cc5555; /* Even darker red on hover */
        }

        /* Export button specific styles (darker background) */
        .export-btn {
            background-color: #1e6ba8; /* Darker blue background */
            color: white; /* White text for contrast */
        }

        /* Export button hover state */
        .export-btn:hover {
            background-color: #1a5a8d; /* Even darker blue on hover */
        }

        /* Blank sheet styles: Hidden content sections */
        .blank-sheet {
            display: none; /* Hidden by default until selected */
            padding: 0 20px 20px 20px; /* Internal padding (top padding is 0 for header) */
            border: 1px solid #ddd; /* Light gray border */
            border-radius: 8px; /* Rounded corners */
            background-color: #f9f9f9; /* Light gray background */
        }

        /* Tools-specific section styles: Container for three columns */
        .tools-container {
            display: flex; /* Uses flexbox for horizontal layout */
            justify-content: space-between; /* Distributes columns evenly */
            gap: 20px; /* Space between columns */
            margin-top: 20px; /* Space above the columns */
        }

        /* Tools-specific section styles for each column */
        .tools-section {
            padding: 15px; /* Internal padding for each section */
            border: 1px solid #ddd; /* Light gray border for separation */
            border-radius: 8px; /* Rounded corners to match design */
            background-color: white; /* White background for contrast */
            min-width: 0; /* Prevents overflow */
        }

        /* Input and Output sections width: Same width, each 50% of container width (accounting for gap) */
        .tools-section.input,
        .tools-section.output {
            flex: 2.375; /* Each takes approximately 50% of container width (adjusted for 20px gap, totaling ~100% with buttons) */
        }

        /* Plain cell styling for input and output tables with slight curve (identical for both) */
        .tools-section.input table td,
        .tools-section.output table td {
            background-color: #ffffff; /* Plain white background */
            border: 1px solid #ddd; /* Standard light gray border */
            border-radius: 4px; /* Slight curve for modern look */
            padding: 4px; /* Internal padding for consistency */
            margin-bottom: 3px; /* Maintains reduced padding/boundary between cells */
        }

        /* Input field styling within input cells */
        .tools-section.input input[type="text"] {
            background: transparent; /* Transparent background to show plain white */
            border: none; /* No border */
            outline: none; /* No outline on focus */
            width: 100%; /* Full width of cell (unchanged) */
            height: 100%; /* Full height of cell, ensuring same height as output (20px) */
            font-size: 14px; /* Font size for readability */
            font-family: 'Calibri', sans-serif; /* Matches body font */
            line-height: 12px; /* Adjusts line height to fit within 20px height */
        }

        /* Buttons section width: Narrower, just enough to fit smaller blue buttons with proper alignment */
        .tools-section.buttons {
            flex: 0.5; /* Reduced width, approximately 12.5% of container width or less (unchanged) */
            display: flex; /* Uses flexbox for vertical and horizontal centering */
            justify-content: center; /* Centers buttons horizontally */
            align-items: center; /* Centers buttons vertically */
            padding: 20px; /* Maintains top padding for alignment and spacing */
        }

        /* Tool button styles: Matches the image style for buttons in Tools section, smaller size, only blue color */
        .tool-btn {
            display: block; /* Stacks buttons vertically */
            margin: 10px 0; /* Vertical spacing between buttons */
            padding: 5px 10px; /* Reduced internal padding for smaller size (unchanged) */
            width: 120px; /* Reduced width for smaller buttons (unchanged) */
            height: 30px; /* Reduced height for smaller buttons (unchanged) */
            background-color: #f0f0f0; /* Light gray base as default */
            color: #000000; /* Black text as default */
            border: 1px solid #ccc; /* Light gray border */
            border-radius: 4px; /* Slight rounding for modern look */
            cursor: pointer; /* Hand cursor on hover */
            font-size: 12px; /* Smaller font size for readability */
            font-family: 'Calibri', sans-serif; /* Matches body font */
            text-align: center; /* Centers text in button */
            transition: background-color 0.3s ease; /* Smooth hover transition */
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); /* Reduced shadow for smaller buttons */
        }

        /* Blue button styles for all buttons */
        .tool-btn {
            background-color: #4a90e2; /* Blue base color */
            color: white; /* White text for contrast */
        }

        .tool-btn:hover {
            background-color: #357abd; /* Darker blue on hover */
        }

        /* Fixed column widths for data tables */
        /* DataTable column widths */
        #dataTable th:nth-child(1) { width: 150px; } /* Heading Name column */
        #dataTable th:nth-child(2) { width: 100px; } /* Heading ID column */
        #dataTable th:nth-child(3) { width: 200px; } /* Definition column */
        #dataTable th:nth-child(4) { width: 100px; } /* Family column */
        #dataTable th:nth-child(5) { width: 100px; } /* PDM NUM column */
        #dataTable th:nth-child(6) { width: 150px; } /* Link column */
        #dataTable th:nth-child(7) { width: 80px; } /* HOS column */
        #dataTable th:nth-child(8) { width: 120px; } /* Updated By column */

        /* DataTablePDM column widths */
        #dataTablePDM th:nth-child(1) { width: 100px; } /* PDM NUM column */
        #dataTablePDM th:nth-child(2) { width: 150px; } /* Summary column */
        #dataTablePDM th:nth-child(3) { width: 200px; } /* PDM Text column */
        #dataTablePDM th:nth-child(4) { word-break: break-all; width: 100px; } /* Heading Count column */
        #dataTablePDM th:nth-child(5) { width: 120px; } /* Date column */
        #dataTablePDM th:nth-child(6) { width: 120px; } /* Updated BY column */

        /* ClassificationDetailsTable column widths */
        #classificationDetailsTable th:nth-child(1) { width: 100px; } /* Heading ID column */
        #classificationDetailsTable th:nth-child(2) { width: 150px; } /* Heading Name column */
        #classificationDetailsTable th:nth-child(3) { width: 100px; } /* Family column */
        #classificationDetailsTable th:nth-child(4) { width: 150px; } /* Link column */
        #classificationDetailsTable th:nth-child(5) { width: 100px; } /* PDM NUM column */
        #classificationDetailsTable th:nth-child(6) { width: 200px; } /* PDM TEXT column */
        #classificationDetailsTable th:nth-child(7) { width: 100px; } /* Heading Type column */
    </style>
</head>
<body>
    <!-- Sidebar: Left navigation panel containing menu options -->
    <div class="sidebar">
        <div>
            <!-- Sidebar header: Title at the top of the sidebar -->
            <div class="header">Quality Control Tool</div>
            <!-- Navigation buttons: Each button links to a different content section -->
            <button onclick="showSheet('scraperData')">
                <i class="fas fa-database"></i> Scraper Data (Classification)
            </button>
            <button onclick="showSheet('scraperDataPDM')">
                <i class="fas fa-database"></i> Scraper Data (PDM)
            </button>
            <button onclick="showSheet('classificationDetails')">
                <i class="fas fa-list"></i> Classification Details
            </button>
            <button onclick="showSheet('qcReport')">
                <i class="fas fa-file-alt"></i> QC Report
            </button>
            <button onclick="showSheet('tools')">
                <i class="fas fa-tools"></i> Tools
            </button>
            <button onclick="showSheet('pulldataBackup')">
                <i class="fas fa-archive"></i> Pulldata (Backup)
            </button>
        </div>
        <!-- Sidebar footer: Company name at the bottom of the sidebar -->
        <div class="footer">Technosoft Engineering</div>
    </div>

    <!-- Main content: Right section displaying content based on sidebar selection -->
    <div class="main-content">
        <!-- Scraper Data (Classification) section: Table for classification data -->
        <div id="scraperData" class="blank-sheet">
            <div class="header-container">
                <h1>Scraper Data (Classification)</h1>
                <div class="header-right">
                    <button class="clear-btn" onclick="clearSheet('dataTable')">Clear Data</button>
                    <button class="export-btn" onclick="exportToCSV('dataTable')">Export to CSV</button>
                    <div class="date-time" id="dateTimeScraperData"></div>
                </div>
            </div>
            <table id="dataTable">
                <thead>
                    <tr>
                        <th>Heading Name</th>
                        <th>Heading id</th>
                        <th>Definition</th>
                        <th>Family</th>
                        <th>PDM NUM</th>
                        <th>Link</th>
                        <th>HOS</th>
                        <th>Updated By</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be added here dynamically via JavaScript -->
                </tbody>
            </table>
        </div>

        <!-- Scraper Data (PDM) section: Table for PDM data -->
        <div id="scraperDataPDM" class="blank-sheet">
            <div class="header-container">
                <h1>Scraper Data (PDM)</h1>
                <div class="header-right">
                    <button class="clear-btn" onclick="clearSheet('dataTablePDM')">Clear Data</button>
                    <button class="export-btn" onclick="exportToCSV('dataTablePDM')">Export to CSV</button>
                    <div class="date-time" id="dateTimeScraperPDM"></div>
                </div>
            </div>
            <table id="dataTablePDM">
                <thead>
                    <tr>
                        <th>PDM NUM</th>
                        <th>Summary</th>
                        <th>PDM Text</th>
                        <th>Heading Count</th>
                        <th>Date</th>
                        <th>Updated BY</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be added here dynamically via JavaScript -->
                </tbody>
            </table>
        </div>

        <!-- Classification Details section: Table for detailed classification data -->
        <div id="classificationDetails" class="blank-sheet">
            <div class="header-container">
                <h1>Classification Details</h1>
                <div class="header-right">
                    <button class="clear-btn" onclick="clearSheet('classificationDetailsTable')">Clear Data</button>
                    <button class="export-btn" onclick="exportToCSV('classificationDetailsTable')">Export to CSV</button>
                    <div class="date-time" id="dateTimeClassification"></div>
                </div>
            </div>
            <table id="classificationDetailsTable">
                <thead>
                    <tr>
                        <th>Heading Id</th>
                        <th>Heading Name</th>
                        <th>Family</th>
                        <th>Link</th>
                        <th>PDM NUM</th>
                        <th>PDM TEXT</th>
                        <th>Heading Type</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Rows will be added here dynamically via JavaScript -->
                </tbody>
            </table>
        </div>

        <!-- QC Report section: Simple report page with minimal content -->
        <div id="qcReport" class="blank-sheet">
            <div class="header-container">
                <h1>QC Report</h1>
                <div class="header-right">
                    <button class="clear-btn" onclick="clearSheet('qcReport')">Clear Data</button>
                    <div class="date-time" id="dateTimeQCReport"></div>
                </div>
            </div>
        </div>

        <!-- Tools section: Interactive page with identical plain, curved Excel-like input and output (15 empty output cells), and properly aligned blue task buttons in columns -->
        <div id="tools" class="blank-sheet">
            <div class="header-container">
                <h1>Tools</h1>
                <div class="header-right">
                    <button class="export-btn" onclick="exportToCSV('tools')">Export to CSV</button>
                    <div class="date-time" id="dateTimeTools"></div>
                </div>
            </div>
            <div class="tools-container">
                <!-- Input Section: Plain, curved Excel-like table for user input (50% of container width, left column) -->
                <div class="tools-section input">
                    <table id="toolInputTable">
                        <thead>
                            <tr>
                                <th>Input Cell</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr><td><input type="text" class="input-cell" name="input1"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input2"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input3"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input4"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input5"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input6"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input7"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input8"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input9"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input10"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input11"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input12"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input13"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input14"></td></tr>
                            <tr><td><input type="text" class="input-cell" name="input15"></td></tr>
                        </tbody>
                    </table>
                </div>
                <!-- Output Section: Plain, curved Excel-like table for displaying results (50% of container width, middle column, empty by default) -->
                <div class="tools-section output">
                    <table id="toolOutputTable">
                        <thead>
                            <tr>
                                <th>Output Cell</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                            <tr><td class="output-cell"></td></tr>
                        </tbody>
                    </table>
                </div>
                <!-- Buttons Section: Smaller, blue buttons properly aligned (Narrower column, just wide enough to fit buttons) -->
                <div class="tools-section buttons">
                    <div style="padding-top: 20px; display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100%;">
                        <button class="tool-btn" onclick="spacingCheck()">Spacing Check</button>
                        <button class="tool-btn" onclick="removeSpace()">Remove Space</button>
                        <button class="tool-btn" onclick="wordCounter()">Word Counter</button>
                        <button class="tool-btn" onclick="clearToolData()">Clear Data</button>
                        <button class="tool-btn" onclick="linkCheck()">Link Check</button>
                        <button class="tool-btn" onclick="duplicatePDM()">Duplicate PDM</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Pulldata (Backup) section: Backup data section -->
        <div id="pulldataBackup" class="blank-sheet">
            <div class="header-container">
                <h1>Pulldata (Backup)</h1>
                <div class="header-right">
                    <button class="clear-btn" onclick="clearSheet('pulldataBackup')">Clear Data</button>
                    <div class="date-time" id="dateTimeBackup"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Function to format heading IDs by removing non-numeric characters and padding with zeros
        function formatHeadingId(headingId) {
            let cleanNumber = headingId.replace(/ID:/g, '').replace(/[^0-9]/g, '');
            return cleanNumber.padStart(8, '0');
        }

        // Function to extract the first number from a string
        function extractNumber(str) {
            const match = str.match(/\d+/);
            return match ? match[0] : '';
        }

        // Synchronizes data from Scraper Data (Classification) to Classification Details
        function syncToClassificationDetails() {
            const scraperTable = document.getElementById('dataTable'); // Get Scraper Data table
            const classificationTable = document.getElementById('classificationDetailsTable'); // Get Classification Details table
            
            const scraperRows = scraperTable.getElementsByTagName('tbody')[0].rows; // Get rows from Scraper Data
            const classificationRows = classificationTable.getElementsByTagName('tbody')[0].rows; // Get rows from Classification Details

            for (let i = 0; i < Math.max(scraperRows.length, classificationRows.length); i++) {
                if (i >= classificationRows.length) {
                    addRow('classificationDetailsTable'); // Add row if needed in Classification Details
                }
                
                const classificationRow = classificationTable.getElementsByTagName('tbody')[0].rows[i]; // Current Classification row
                
                if (i < scraperRows.length) {
                    const scraperRow = scraperRows[i]; // Current Scraper row
                    const headingIdInput = scraperRow.cells[1].querySelector('input'); // Heading ID input
                    const headingNameInput = scraperRow.cells[0].querySelector('input'); // Heading Name input
                    const definitionInput = scraperRow.cells[2].querySelector('input'); // Definition input
                    const familyInput = scraperRow.cells[3].querySelector('input'); // Family input
                    const pomNumInput = scraperRow.cells[4].querySelector('input'); // PDM NUM input
                    const linkInput = scraperRow.cells[5].querySelector('input'); // Link input
                    
                    if (headingIdInput.value) {
                        classificationRow.cells[0].querySelector('input').value = formatHeadingId(headingIdInput.value); // Format and set Heading ID
                    }
                    if (headingNameInput.value) {
                        classificationRow.cells[1].querySelector('input').value = headingNameInput.value; // Set Heading Name
                    }
                    if (familyInput.value) {
                        classificationRow.cells[2].querySelector('input').value = familyInput.value; // Set Family
                    }
                    if (linkInput.value) {
                        classificationRow.cells[3].querySelector('input').value = linkInput.value; // Set Link
                    }

                    if (pomNumInput.value) {
                        classificationRow.cells[4].querySelector('input').value = pomNumInput.value; // Set PDM NUM
                    } else if (definitionInput.value) {
                        const numberFromDefinition = extractNumber(definitionInput.value); // Extract number from definition
                        if (numberFromDefinition) {
                            classificationRow.cells[4].querySelector('input').value = numberFromDefinition; // Set PDM NUM if found
                        }
                    }
                }
            }
            syncPDMText(); // Synchronize PDM text after updating classification details
        }

        // Synchronizes PDM text from Scraper Data (PDM) to Classification Details
        function syncPDMText() {
            const pdmTable = document.getElementById('dataTablePDM'); // Get Scraper Data (PDM) table
            const classificationTable = document.getElementById('classificationDetailsTable'); // Get Classification Details table
            
            const pdmRows = pdmTable.getElementsByTagName('tbody')[0].rows; // Get rows from PDM Data
            const classificationRows = classificationTable.getElementsByTagName('tbody')[0].rows; // Get rows from Classification Details

            for (let i = 0; i < classificationRows.length; i++) {
                const classificationRow = classificationRows[i]; // Current Classification row
                const pdmNumInput = classificationRow.cells[4].querySelector('input'); // PDM NUM input
                const pdmTextInput = classificationRow.cells[5].querySelector('input'); // PDM TEXT input
                const pdmNumValue = pdmNumInput.value.trim(); // Trimmed PDM number value

                if (!pdmNumValue) {
                    pdmTextInput.value = ''; // Clear PDM text if no PDM number
                    continue;
                }

                if (isNaN(pdmNumValue)) {
                    pdmTextInput.value = 'This Heading does not have PDM'; // Set message if PDM number is not numeric
                    continue;
                }

                let found = false;
                for (let j = 0; j < pdmRows.length; j++) {
                    const pdmRow = pdmRows[j]; // Current PDM row
                    const pdmNumSource = pdmRow.cells[0].querySelector('input').value.trim(); // Trimmed PDM number from source
                    const pdmTextSource = pdmRow.cells[2].querySelector('input').value; // PDM text from source

                    if (pdmNumValue.toLowerCase() === pdmNumSource.toLowerCase()) {
                        pdmTextInput.value = pdmTextSource; // Set matching PDM text
                        found = true;
                        break;
                    }
                }

                if (!found) {
                    pdmTextInput.value = 'This PDM number does not have PDM text in Library'; // Set message if no match found
                }
            }
        }

        // Adds a new row to the specified table
        function addRow(tableId) {
            const table = document.getElementById(tableId).getElementsByTagName('tbody')[0]; // Get tbody of the target table
            const newRow = table.insertRow(); // Insert a new row

            let columns; // Define columns based on table type
            if (tableId === 'dataTable') {
                columns = ['headingName', 'headingId', 'definition', 'family', 'pomNum', 'link', 'hos', 'updatedBy'];
            } else if (tableId === 'dataTablePDM') {
                columns = ['pomNum', 'summary', 'pomText', 'headingCount', 'date', 'updatedBy'];
            } else if (tableId === 'classificationDetailsTable') {
                columns = ['headingId', 'headingName', 'family', 'link', 'pdmNum', 'pdmText', 'headingType'];
            }

            columns.forEach(col => { // Add input fields for each column
                const newCell = newRow.insertCell(); // Create a new cell
                const input = document.createElement('input'); // Create input element
                input.type = 'text'; // Set input type to text
                input.name = col; // Set input name for identification
                newCell.appendChild(input); // Add input to cell
            });

            if (tableId === 'dataTable') {
                syncToClassificationDetails(); // Sync if adding to Scraper Data
            }
            if (tableId === 'classificationDetailsTable') {
                syncPDMText(); // Sync PDM text if adding to Classification Details
            }
        }

        // Clears all rows in the specified table and adds 15 empty rows
        function clearSheet(tableId) {
            const table = document.getElementById(tableId).getElementsByTagName('tbody')[0]; // Get tbody of the target table
            table.innerHTML = ''; // Remove all existing rows
            for (let i = 0; i < 15; i++) {
                addRow(tableId); // Add 15 new empty rows
            }
        }

        // Exports table data to CSV format and triggers download
        function exportToCSV(tableId) {
            const table = document.getElementById(tableId); // Get the target table
            const rows = table.querySelectorAll('tbody tr'); // Get all rows in tbody
            const csv = []; // Initialize array for CSV data
            rows.forEach(row => { // Process each row
                const rowData = []; // Initialize array for row data
                if (tableId === 'tools') {
                    // For tools, collect only input values from toolInputTable
                    const inputCells = document.querySelectorAll('#toolInputTable input');
                    inputCells.forEach(input => rowData.push(input.value || ''));
                } else {
                    // For other tables, collect input values as before
                    row.querySelectorAll('input').forEach(input => rowData.push(input.value));
                }
                csv.push(rowData.join(',')); // Join values with commas and add to CSV
            });
            const csvContent = 'data:text/csv;charset=utf-8,' + csv.join('\n'); // Create CSV content
            const encodedUri = encodeURI(csvContent); // Encode URI for download
            const link = document.createElement('a'); // Create download link
            link.setAttribute('href', encodedUri); // Set href to CSV data
            link.setAttribute('download', `${tableId}.csv`); // Set download filename
            document.body.appendChild(link); // Add link to document
            link.click(); // Trigger download
        }

        // Handles paste events to populate table cells
        function handlePaste(event, tableId) {
            const table = document.getElementById(tableId).getElementsByTagName('tbody')[0]; // Get tbody of the target table
            const clipboardData = event.clipboardData || window.clipboardData; // Get clipboard data
            const pastedData = clipboardData.getData('text'); // Get pasted text

            const rows = pastedData.split('\n').map(row => row.split('\t')); // Split pasted data into rows and columns (tab-separated)
            const startCell = event.target.closest('td'); // Find the cell where paste occurred
            const startRow = startCell.parentElement; // Find the row of the start cell
            const startRowIndex = Array.from(startRow.parentElement.children).indexOf(startRow); // Get row index
            const startCellIndex = Array.from(startRow.children).indexOf(startCell); // Get cell index

            rows.forEach((row, rowIndex) => { // Process each pasted row
                let currentRow = table.rows[startRowIndex + rowIndex]; // Get or create current row
                if (!currentRow) {
                    addRow(tableId); // Add row if it doesn’t exist
                    currentRow = table.rows[startRowIndex + rowIndex]; // Update current row reference
                }
                row.forEach((cellData, cellIndex) => { // Process each cell in the row
                    const currentCell = currentRow.cells[startCellIndex + cellIndex]; // Get current cell
                    if (currentCell) {
                        const input = currentCell.querySelector('input'); // Get input in cell
                        if (input) {
                            input.value = cellData; // Set input value to pasted data
                        }
                    }
                });
            });

            if (tableId === 'dataTable') {
                syncToClassificationDetails(); // Sync if pasting into Scraper Data
            }
            if (tableId === 'classificationDetailsTable') {
                syncPDMText(); // Sync PDM text if pasting into Classification Details
            }

            event.preventDefault(); // Prevent default paste behavior
        }

        // Add paste event listeners to tables for handling clipboard input
        document.getElementById('dataTable').addEventListener('paste', (event) => handlePaste(event, 'dataTable'));
        document.getElementById('dataTablePDM').addEventListener('paste', (event) => handlePaste(event, 'dataTablePDM'));
        document.getElementById('classificationDetailsTable').addEventListener('paste', (event) => handlePaste(event, 'classificationDetailsTable'));

        // Shows the selected sheet and updates active button state
        function showSheet(sheetId) {
            const sheets = document.querySelectorAll('.blank-sheet'); // Get all content sections
            sheets.forEach(sheet => sheet.style.display = 'none'); // Hide all sections
            const selectedSheet = document.getElementById(sheetId); // Get the selected section
            if (selectedSheet) {
                selectedSheet.style.display = 'block'; // Show the selected section
            }
            const buttons = document.querySelectorAll('.sidebar button'); // Get all sidebar buttons
            buttons.forEach(button => button.classList.remove('active')); // Remove active class from all buttons
            const activeButton = document.querySelector(`.sidebar button[onclick="showSheet('${sheetId}')"]`); // Find the selected button
            if (activeButton) {
                activeButton.classList.add('active'); // Add active class to the selected button
            }
        }

        // Initializes tables with 15 empty rows
        function initializeTable() {
            const table1 = document.getElementById('dataTable').getElementsByTagName('tbody')[0]; // Get Scraper Data tbody
            const table2 = document.getElementById('dataTablePDM').getElementsByTagName('tbody')[0]; // Get Scraper Data (PDM) tbody
            const table3 = document.getElementById('classificationDetailsTable').getElementsByTagName('tbody')[0]; // Get Classification Details tbody
            for (let i = 0; i < 15; i++) {
                addRow('dataTable'); // Add rows to Scraper Data
                addRow('dataTablePDM'); // Add rows to Scraper Data (PDM)
                addRow('classificationDetailsTable'); // Add rows to Classification Details
            }
            syncPDMText(); // Synchronize PDM text after initialization
        }

        // Tools-specific functions
        function spacingCheck() {
            const inputs = document.querySelectorAll('.input-cell');
            const outputs = document.querySelectorAll('.output-cell');
            inputs.forEach((input, index) => {
                const value = input.value.trim();
                let output = '';
                if (value.includes('  ')) {
                    output = 'Contains extra spaces!';
                } else {
                    output = 'No extra spaces.';
                }
                outputs[index].textContent = output;
            });
        }

        function removeSpace() {
            const inputs = document.querySelectorAll('.input-cell');
            const outputs = document.querySelectorAll('.output-cell');
            inputs.forEach((input, index) => {
                const value = input.value.trim().replace(/\s+/g, ' ');
                outputs[index].textContent = value || '';
                input.value = value; // Update input to reflect removed spaces
            });
        }

        function wordCounter() {
            const inputs = document.querySelectorAll('.input-cell');
            const outputs = document.querySelectorAll('.output-cell');
            inputs.forEach((input, index) => {
                const value = input.value.trim();
                let output = '';
                if (value) {
                    const words = value.split(/\s+/).filter(word => word.length > 0);
                    output = `${words.length} word${words.length !== 1 ? 's' : ''}.`;
                }
                outputs[index].textContent = output;
            });
        }

        function clearToolData() {
            const inputs = document.querySelectorAll('.input-cell');
            const outputs = document.querySelectorAll('.output-cell');
            inputs.forEach(input => input.value = '');
            outputs.forEach(output => output.textContent = '');
        }

        function linkCheck() {
            const inputs = document.querySelectorAll('.input-cell');
            const outputs = document.querySelectorAll('.output-cell');
            const urlRegex = /^(https?:\/\/[^\s]+)$/i;
            inputs.forEach((input, index) => {
                const value = input.value.trim();
                let output = '';
                if (urlRegex.test(value)) {
                    output = 'Valid URL!';
                } else if (value) {
                    output = 'Not a valid URL.';
                }
                outputs[index].textContent = output;
            });
        }

        function duplicatePDM() {
            const inputs = document.querySelectorAll('.input-cell');
            const values = Array.from(inputs).map(input => input.value.trim().toLowerCase());
            const duplicates = values.filter((item, index) => values.indexOf(item) !== index && item);
            const outputs = document.querySelectorAll('.output-cell');
            inputs.forEach((input, index) => {
                const value = input.value.trim();
                let output = '';
                if (duplicates.includes(value.toLowerCase()) && value) {
                    output = 'Duplicate PDM found!';
                } else if (value) {
                    output = 'No duplicate PDM.';
                }
                outputs[index].textContent = output;
            });
        }

        // Updates and displays the current date and time on each page
        function updateDateTime() {
            const now = new Date(); // Get current date and time
            const dateTimeString = now.toLocaleString('en-US', {
                dateStyle: 'medium', // Formats date as "Mar 3, 2025"
                timeStyle: 'medium' // Formats time as "10:30:45 AM"
            });
            document.getElementById('dateTimeScraperData').textContent = dateTimeString; // Update Scraper Data date-time
            document.getElementById('dateTimeScraperPDM').textContent = dateTimeString; // Update Scraper Data (PDM) date-time
            document.getElementById('dateTimeClassification').textContent = dateTimeString; // Update Classification Details date-time
            document.getElementById('dateTimeQCReport').textContent = dateTimeString; // Update QC Report date-time
            document.getElementById('dateTimeTools').textContent = dateTimeString; // Update Tools date-time
            document.getElementById('dateTimeBackup').textContent = dateTimeString; // Update Pulldata (Backup) date-time
        }

        // Runs on page load to set up the application
        window.onload = function() {
            initializeTable(); // Initialize tables with empty rows
            updateDateTime(); // Set initial date and time
            setInterval(updateDateTime, 1000); // Update date and time every second
        };
    </script>
</body>
</html>
